(undo-tree-save-format-version . 1)
"f7c0529bcaaad38c616f024d2403280a32e4b18e"
[nil nil nil nil (25892 24079 367885 454000) 0 nil]
([nil nil ((3105 . 3107) (3122 . 3124) (3146 . 3148) (3154 . 3156) (3229 . 3231) (3254 . 3256) (3349 . 3351) (3384 . 3385) (3390 . 3391) (3429 . 3430) (3435 . 3436) (3470 . 3471) (3476 . 3477) (3520 . 3521) (3526 . 3527) (3571 . 3579) 3101 (#("      " 0 6 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3570) (undo-tree-id95 . -6) (undo-tree-id96 . -6) (undo-tree-id97 . -6) (undo-tree-id98 . -6) (undo-tree-id99 . -6) (undo-tree-id100 . -6) (undo-tree-id101 . -6) (undo-tree-id102 . -6) (undo-tree-id103 . -6) (undo-tree-id104 . -6) (undo-tree-id105 . -6) (3576 . 3577) (3103 . 3105) (3120 . 3122) (3140 . 3142) (3148 . 3149) (3152 . 3153) (3215 . 3216) (3219 . 3220) (3244 . 3245) (3248 . 3249) (3331 . 3333) (3374 . 3376) (3413 . 3415) (3456 . 3458) (3500 . 3501) (3504 . 3505) (3548 . 3554) 3101 (3547 . 3548) (t 25892 13241 577592 453000)) nil (25892 24079 367884 372000) 0 nil])
([nil nil ((#("    " 0 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . -3549) (undo-tree-id78 . 4) (undo-tree-id79 . 4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) 3553 (#("    " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 2 4 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3103) (#("  " 0 2 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3124) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3130) (#("    " 0 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3144) (#("    " 0 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 3 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3164) (#("  " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3231) (#("  " 0 2 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3237) (#("   " 0 2 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil) 2 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3264) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3271) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3355) (#("  " 0 2 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3361) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3398) (#("   " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 2 3 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3403) (#("   " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil) 1 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3445) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3452) (#("  " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3488) (#("  " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 2 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3494) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3540) (#("   " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 2 3 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3545) (#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3593) (undo-tree-id92 . 1) (undo-tree-id93 . -1) (undo-tree-id94 . 1) (3598 . 3599) 3101 (3592 . 3593) 3592) nil (25892 24079 367830 21000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3584 . 3585) (nil fontified nil 3549 . 3585) (3549 . 3585)) nil (25892 24079 367824 380000) 0 nil])
([nil nil ((3551 . 3553) 3101) nil (25892 24079 367824 140000) 0 nil])
([nil nil ((3548 . 3552) 3101 (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3587) (undo-tree-id29 . 1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . 1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3587) (undo-tree-id70 . 1) (undo-tree-id71 . 1) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3587) (undo-tree-id72 . 1) (undo-tree-id73 . 1) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3587) (undo-tree-id74 . 1) (undo-tree-id75 . 1) (#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3587) (undo-tree-id76 . 1) (undo-tree-id77 . 1)) nil (25892 24079 367823 148000) 0 nil])
([nil nil ((3107 . 3109) (3124 . 3126) (3152 . 3154) (3160 . 3162) (3239 . 3241) (3264 . 3266) (3363 . 3365) (3398 . 3399) (3406 . 3407) (3445 . 3446) (3453 . 3454) (3488 . 3489) (3496 . 3497) (3540 . 3542) (3600 . 3602) (3601 . 3603) (3646 . 3649) 3101 (#("        " 0 8 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3645) (undo-tree-id0 . -8) (undo-tree-id1 . -8) (undo-tree-id2 . -8) (undo-tree-id3 . -8) (undo-tree-id4 . -8) (undo-tree-id5 . -8) (undo-tree-id6 . -8) (undo-tree-id7 . -8) (undo-tree-id8 . -8) (undo-tree-id9 . -8) (undo-tree-id10 . -8) (3653 . 3654) (3105 . 3107) (3122 . 3123) (3128 . 3129) (3140 . 3141) (3146 . 3147) (3154 . 3155) (3160 . 3161) (3223 . 3224) (3229 . 3230) (3254 . 3255) (3260 . 3261) (3343 . 3344) (3349 . 3350) (3384 . 3385) (3390 . 3391) (3429 . 3430) (3435 . 3436) (3470 . 3472) (3520 . 3522) (3576 . 3578) (3577 . 3579) (3619 . 3627) 3101 (#("      " 0 6 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified nil)) . 3618) (undo-tree-id11 . -6) (undo-tree-id12 . -6) (undo-tree-id13 . -6) (undo-tree-id14 . -6) (undo-tree-id15 . -6) (undo-tree-id16 . -6) (undo-tree-id17 . -6) (undo-tree-id18 . -6) (undo-tree-id19 . -6) (undo-tree-id20 . -6) (undo-tree-id21 . -6) (undo-tree-id22 . -6) (undo-tree-id23 . -6) (undo-tree-id24 . -6) (undo-tree-id25 . -6) (undo-tree-id26 . -6) (undo-tree-id27 . -6) (undo-tree-id28 . -6) (3624 . 3625) (3103 . 3105) (3120 . 3122) (3140 . 3142) (3148 . 3150) (3219 . 3221) (3244 . 3246) (3335 . 3337) (3370 . 3372) (3417 . 3419) (3452 . 3454) (3504 . 3506) (3548 . 3550) (3557 . 3559) (3592 . 3598) 3101 (3591 . 3592)) nil (25892 24079 367807 458000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3773 . 3774) (nil fontified nil 3671 . 3774) (3671 . 3774)) nil (25892 24079 366684 666000) 0 nil])
([nil nil ((3673 . 3674) 3101) nil (25892 24079 366684 255000) 0 nil])
([nil nil ((#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3107) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3126) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3156) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3166) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3247) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3274) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3375) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3412) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3421) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3461) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3470) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3506) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3515) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3560) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3622) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3625) (3701 . 3702) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3711) 3101) nil (25892 24079 366683 654000) 0 nil])
([nil nil ((3688 . 3691) 3101) nil (25892 24079 366682 842000) 0 nil])
([nil nil ((3626 . 3635) (#("    " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 2 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3103) (#("    " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 3 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3124) (#("    " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 3 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3148) (#("   " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3160) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3167) (#("   " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3231) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3238) (#("  " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3264) (#("  " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3270) (#("  " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3355) (#("  " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3361) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3398) (#("   " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 2 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3403) (#("    " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 1 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3445) (#("    " 0 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 3 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3492) (#("   " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 2 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3540) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3547) (#("   " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil) 2 3 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3592) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3599) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3601) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified nil)) . 3607) (3673 . 3678) 3101 (3672 . 3673)) nil (25892 24079 366678 364000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3713) (#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t rear-nonsticky t fontified t)) . 3713) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (t 25892 24079 372960 755000)) nil (25892 24085 443783 865000) 0 nil])
([nil nil ((3595 . 3597) (#("	" 0 1 (display "        " face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3595) 3101) nil (25892 24085 443781 330000) 0 nil])
([nil nil ((3624 . 3626) (#("	" 0 1 (display "        " face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3624) 3101) nil (25892 24085 443781 39000) 0 nil])
([nil nil ((3640 . 3642) (#("	" 0 1 (display "        " face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3640) 3101) nil (25892 24085 443780 609000) 0 nil])
([nil nil ((3654 . 3656) (#("	" 0 1 (display "        " face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . 3654) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 3101) nil (25892 24085 443777 713000) 0 nil])
([nil nil ((#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . -3718) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("	" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . -3719) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) 3720 (t 25892 24085 449947 659000)) nil (25892 24095 581139 860000) 0 nil])
([nil nil ((#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) . -3717) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 3718) nil (25892 24095 581127 848000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3620 . 3621) (nil fontified nil 3592 . 3621) (3592 . 3621) (t 25892 24095 589925 815000)) nil (25892 24208 399693 763000) 0 nil])
([nil nil ((3103 . 3105) (3120 . 3121) (3124 . 3125) (3136 . 3137) (3140 . 3141) (3148 . 3150) (3215 . 3217) (3248 . 3250) (3331 . 3332) (3335 . 3336) (3370 . 3371) (3374 . 3375) (3413 . 3415) (3452 . 3454) (3504 . 3506) (3548 . 3549) (3552 . 3553) (3553 . 3554) (3557 . 3558) (3592 . 3598) (3622 . 3623) (3626 . 3627) (3651 . 3652) (3657 . 3658) (3667 . 3669) (3681 . 3683) 3101) nil (25892 24208 399690 156000) 0 nil])
([nil nil ((#("  " 0 2 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3103) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3122) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3127) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3140) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3145) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3154) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t)) . 3159) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3223) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t)) . 3228) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t)) . 3254) (#("  " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t)) . 3343) (#("  " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t) 1 2 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3388) (#("  " 0 2 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3429) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t)) . 3474) (#(" " 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t)) . 3520) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3525) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3570) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3575) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3577) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3582) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3618) (#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3623) (#("  " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t)) . 3654) (#("  " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t)) . 3685) (#("  " 0 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t)) . 3709) (#("  " 0 2 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . 3719) 3101 (t 25892 24208 405683 331000)) nil (25892 24211 256858 179000) 0 nil])
([nil nil ((142 . 145) 138 (135 . 138) (t 25892 24211 268677 189000)) nil (25892 24442 465934 136000) 0 nil])
([nil nil ((#("* 
" 0 1 (face org-level-1 keymap (keymap) composition (0 1 [9673]) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 1 2 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 2 3 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 142) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . 1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -3) (undo-tree-id133 . -2) 143) nil (25892 24442 465933 505000) 0 nil])
([nil nil ((136 . 138) (#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -136) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("-" 0 1 (wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -137) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 138 (137 . 138) (#(" " 0 1 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -137) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 138) nil (25892 24442 465923 806000) 0 nil])
([nil nil ((nil rear-nonsticky nil 138 . 139) (#("
" 0 1 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified nil)) . -141) (138 . 142) 137) nil (25892 24442 465687 654000) 0 nil])
([nil nil ((#("* 
" 0 1 (face org-level-1 keymap (keymap) composition (0 1 [9673]) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 1 2 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t) 2 3 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 139) (undo-tree-id0 . 1) (undo-tree-id1 . -2) (undo-tree-id2 . -3)) nil (25892 24442 465687 203000) 0 nil])
([nil nil ((138 . 139)) nil (25892 24442 465669 420000) 0 nil])
([nil nil ((nil rear-nonsticky nil 180 . 181) (nil fontified nil 139 . 181) (139 . 181) 138) nil (25892 24442 465665 403000) 0 nil])
([nil nil ((#(" " 0 1 (face (org-indent) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 137) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (t 25892 24442 475183 799000)) nil (25892 24444 599602 460000) 0 nil])
([nil nil ((184 . 187) 31 (t 25892 24444 614179 255000)) nil (25892 24544 488783 966000) 0 nil])
([nil nil ((208 . 212) (#("
" 0 1 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . 207) (undo-tree-id729 . 1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . 1) (206 . 207) (200 . 206) (#("A" 0 1 (face org-level-2 isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -200) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#("d" 0 1 (face org-level-2 isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -201) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (#("d" 0 1 (face org-level-2 isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -202) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) 203 (192 . 203) (#("
" 0 1 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -192) (undo-tree-id824 . 1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (#("*" 0 1 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -193) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#("(" 0 1 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -194) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) 195 (194 . 195) (#("&" 0 1 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -194) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) 195 (194 . 195) (#(" " 0 1 (face org-level-1 keymap (keymap) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -194) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) 195 (193 . 195) (192 . 193) (191 . 193) (187 . 191) (#("o" 0 1 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -187) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (#("d" 0 1 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -188) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) 189 (186 . 189) (#("R" 0 1 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . -186) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) 187 (186 . 187)) nil (25892 24544 488778 837000) 0 nil])
([nil nil ((#("** 
" 0 1 (keymap (keymap) face org-hide wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 1 2 (face org-level-2 keymap (keymap) composition (1 1 [9675]) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 2 3 (face org-level-2 keymap (keymap) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t) 3 4 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . 208) (undo-tree-id690 . 1) (undo-tree-id691 . -3) (undo-tree-id692 . -3) (undo-tree-id693 . -3) (undo-tree-id694 . -3) (undo-tree-id695 . -3) (undo-tree-id696 . -3) (undo-tree-id697 . -3) (undo-tree-id698 . -3) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) (undo-tree-id706 . -3) (undo-tree-id707 . -3) (undo-tree-id708 . -2) (undo-tree-id709 . -2) (undo-tree-id710 . -2) (undo-tree-id711 . -2) (undo-tree-id712 . -2) (undo-tree-id713 . -2) (undo-tree-id714 . -2) (undo-tree-id715 . -2) (undo-tree-id716 . -2) (undo-tree-id717 . -2) (undo-tree-id718 . -2) (undo-tree-id719 . -2) (undo-tree-id720 . -2) (undo-tree-id721 . -2) (undo-tree-id722 . -2) (undo-tree-id723 . -2) (undo-tree-id724 . -2) (undo-tree-id725 . -2) (undo-tree-id726 . -2) (undo-tree-id727 . -2) (undo-tree-id728 . -4) 210) nil (25892 24544 488665 274000) 0 nil])
([nil nil ((315 . 322) (294 . 315) (#("-" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -294) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) 295 (283 . 295) (282 . 283) (#("y" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -282) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) 283 (282 . 283) (261 . 282) (260 . 261) (256 . 260) (235 . 256) (217 . 235) (#("to " 0 3 (face org-level-2 fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -217) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (undo-tree-id452 . -3) (undo-tree-id453 . -3) (undo-tree-id454 . -3) (undo-tree-id455 . -3) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -3) (undo-tree-id464 . -3) (undo-tree-id465 . -3) (undo-tree-id466 . -3) (undo-tree-id467 . -3) (undo-tree-id468 . -3) (undo-tree-id469 . -3) (undo-tree-id470 . -3) (undo-tree-id471 . -3) (undo-tree-id472 . -3) (undo-tree-id473 . -3) (undo-tree-id474 . -3) (undo-tree-id475 . -3) (undo-tree-id476 . -3) (undo-tree-id477 . -3) (undo-tree-id478 . -3) (undo-tree-id479 . -3) (undo-tree-id480 . -3) (undo-tree-id481 . -3) (undo-tree-id482 . -3) (undo-tree-id483 . -3) (undo-tree-id484 . -3) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) 220 (#("automatically " 0 14 (face org-level-2 fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -220) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -2) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -5) (undo-tree-id565 . -5) (undo-tree-id566 . -5) (undo-tree-id567 . -5) (undo-tree-id568 . -5) (undo-tree-id569 . -5) (undo-tree-id570 . -5) (undo-tree-id571 . -5) (undo-tree-id572 . -6) (undo-tree-id573 . -6) (undo-tree-id574 . -6) (undo-tree-id575 . -6) (undo-tree-id576 . -6) (undo-tree-id577 . -6) (undo-tree-id578 . -6) (undo-tree-id579 . -6) (undo-tree-id580 . -7) (undo-tree-id581 . -7) (undo-tree-id582 . -7) (undo-tree-id583 . -7) (undo-tree-id584 . -7) (undo-tree-id585 . -7) (undo-tree-id586 . -7) (undo-tree-id587 . -7) (undo-tree-id588 . -8) (undo-tree-id589 . -8) (undo-tree-id590 . -8) (undo-tree-id591 . -8) (undo-tree-id592 . -8) (undo-tree-id593 . -8) (undo-tree-id594 . -8) (undo-tree-id595 . -8) (undo-tree-id596 . -9) (undo-tree-id597 . -9) (undo-tree-id598 . -9) (undo-tree-id599 . -9) (undo-tree-id600 . -9) (undo-tree-id601 . -9) (undo-tree-id602 . -9) (undo-tree-id603 . -9) (undo-tree-id604 . -10) (undo-tree-id605 . -10) (undo-tree-id606 . -10) (undo-tree-id607 . -10) (undo-tree-id608 . -10) (undo-tree-id609 . -10) (undo-tree-id610 . -10) (undo-tree-id611 . -10) (undo-tree-id612 . -11) (undo-tree-id613 . -11) (undo-tree-id614 . -11) (undo-tree-id615 . -11) (undo-tree-id616 . -11) (undo-tree-id617 . -11) (undo-tree-id618 . -11) (undo-tree-id619 . -11) (undo-tree-id620 . -12) (undo-tree-id621 . -12) (undo-tree-id622 . -12) (undo-tree-id623 . -12) (undo-tree-id624 . -12) (undo-tree-id625 . -12) (undo-tree-id626 . -12) (undo-tree-id627 . -12) (undo-tree-id628 . -13) (undo-tree-id629 . -13) (undo-tree-id630 . -13) (undo-tree-id631 . -13) (undo-tree-id632 . -13) (undo-tree-id633 . -13) (undo-tree-id634 . -13) (undo-tree-id635 . -13) (undo-tree-id636 . -14) (undo-tree-id637 . -14) (undo-tree-id638 . -14) (undo-tree-id639 . -14) (undo-tree-id640 . -14) (undo-tree-id641 . -14) (undo-tree-id642 . -14) (undo-tree-id643 . -14) (undo-tree-id644 . -14) (undo-tree-id645 . -14) (undo-tree-id646 . -14) (undo-tree-id647 . -14) (undo-tree-id648 . -14) (undo-tree-id649 . -14) (undo-tree-id650 . -14) (undo-tree-id651 . -14) (undo-tree-id652 . -14) (undo-tree-id653 . -14) 234 (222 . 234) (207 . 222) (#("@" 0 1 (face org-level-2 isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -207) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) 208 (207 . 208) (#("con" 0 3 (face org-level-2 isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show fontified t)) . -207) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -2) (undo-tree-id673 . -2) (undo-tree-id674 . -2) (undo-tree-id675 . -2) (undo-tree-id676 . -2) (undo-tree-id677 . -2) (undo-tree-id678 . -2) (undo-tree-id679 . -2) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) (undo-tree-id687 . -3) (undo-tree-id688 . -3) (undo-tree-id689 . -3) 210 (207 . 210)) nil (25892 24544 488650 496000) 0 nil])
([nil nil ((326 . 330) (315 . 326) (#("the " 0 4 (fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -315) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) 319 (#("one" 0 3 (fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -319) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) 322) nil (25892 24544 488553 4000) 0 nil])
([nil nil ((330 . 331) (t 25892 24544 497967 581000)) nil (25892 24655 124379 981000) 0 nil])
([nil nil ((nil rear-nonsticky nil 388 . 389) (nil fontified nil 331 . 389) (331 . 389)) nil (25892 24655 124376 274000) 0 nil])
([nil nil ((181 . 183) (#(" " 0 1 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -181) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (#("-" 0 1 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("     " 0 2 (face org-indent) 2 5 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -182) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) 183 (182 . 183) (#(" " 0 1 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -182) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) 183 (180 . 183) (t 25892 24655 134734 63000)) nil (25892 24826 929435 484000) 0 nil])
([nil nil ((183 . 186) 182) nil (25892 24826 929410 778000) 0 nil])
([nil nil ((nil rear-nonsticky nil 268 . 269) (nil fontified nil 183 . 269) (183 . 269) 182) nil (25892 24826 929406 319000) 0 nil])
([nil nil ((181 . 272) (#("- /
- http://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles" 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: http://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/" htmlize-link (:uri "http://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/") font-lock-multiline t) 3 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 5 (face (org-list-dt) isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 5 6 (face (org-indent) isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 6 91 (font-lock-multiline t htmlize-link (:uri "http://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/") help-echo "LINK: http://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 181) (undo-tree-id1210 . -6) (undo-tree-id1211 . -6) (undo-tree-id1212 . -91) (undo-tree-id1213 . -91) (undo-tree-id1214 . -91) (undo-tree-id1215 . -91) (undo-tree-id1216 . -91) (undo-tree-id1217 . -91) (undo-tree-id1218 . -4) (nil font-lock-multiline t 184 . 185) (nil fontified nil 184 . 185) (nil line-prefix #("  " 0 2 (face org-indent)) 184 . 185) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 184 . 185) (nil face org-link 184 . 185) (181 . 185) (#("/" 0 1 (font-lock-multiline t htmlize-link (:uri "http://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/") help-echo "LINK: http://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 268) (t 25892 24826 938366 961000)) nil (25892 24878 960904 447000) 0 nil])
([nil nil ((#("/" 0 1 (htmlize-link (:uri "http://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/") help-echo "LINK: http://honnef.co/articles/my-org-roam-workflows-for-taking-notes-and-writing-articles/" rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . -271) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) 272) nil (25892 24878 960899 588000) 0 nil])
([nil nil ((nil rear-nonsticky nil 314 . 315) (nil fontified nil 271 . 315) (271 . 315) 270) nil (25892 24878 960884 700000) 0 nil])
([nil nil ((269 . 318) (#("- /
- https://karelvo.com/blog/2023-02-17-orgmode" 0 2 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 2 3 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) fontified nil rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://karelvo.com/blog/2023-02-17-orgmode/" htmlize-link (:uri "https://karelvo.com/blog/2023-02-17-orgmode/") font-lock-multiline t) 3 4 (wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil) 4 5 (face (org-list-dt) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 5 6 (face (org-indent) fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent))) 6 49 (font-lock-multiline t htmlize-link (:uri "https://karelvo.com/blog/2023-02-17-orgmode/") help-echo "LINK: https://karelvo.com/blog/2023-02-17-orgmode/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link fontified nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 269) (undo-tree-id1221 . -6) (undo-tree-id1222 . -6) (undo-tree-id1223 . -49) (undo-tree-id1224 . -49) (undo-tree-id1225 . -49) (undo-tree-id1226 . -49) (undo-tree-id1227 . -49) (undo-tree-id1228 . -49) (undo-tree-id1229 . -4) (nil font-lock-multiline t 272 . 273) (nil wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) 272 . 273) (nil line-prefix #("  " 0 2 (face org-indent)) 272 . 273) (nil fontified nil 272 . 273) (nil face org-link 272 . 273) (269 . 273) (#("/" 0 1 (font-lock-multiline t htmlize-link (:uri "https://karelvo.com/blog/2023-02-17-orgmode/") help-echo "LINK: https://karelvo.com/blog/2023-02-17-orgmode/" keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 314) (t 25892 24878 971254 426000)) nil (25892 25175 219676 300000) 0 nil])
([nil nil ((nil rear-nonsticky nil 358 . 359) (nil fontified nil 318 . 359) (318 . 359) 317) nil (25892 25175 219671 601000) 0 nil])
([nil nil ((#("/" 0 1 (htmlize-link (:uri "https://karelvo.com/blog/2023-02-17-orgmode/") help-echo "LINK: https://karelvo.com/blog/2023-02-17-orgmode/" rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t wrap-prefix #("    " 0 2 (face org-indent) 2 4 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)))) . 317) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1)) nil (25892 25175 219669 116000) 0 nil])
([nil nil ((#(" " 0 1 (face (org-block) font-lock-multiline t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t font-lock-fontified t fontified t)) . -990) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (#(" " 0 1 (isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) . -991) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) 992 (t 25892 25175 225618 409000)) nil (25892 25487 46270 239000) 0 nil])
([nil nil ((990 . 992) (t 25892 25487 55957 36000)) nil (25892 25493 220327 417000) 0 nil])
([nil nil ((570 . 571) (t 25892 25493 229944 22000)) nil (25892 25918 673332 694000) 0 nil])
([nil nil ((2090 . 2095) 2011 (t 25892 25918 684054 164000)) nil (25892 25942 936218 294000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 2090) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1)) nil (25892 25942 936218 13000) 0 nil])
([nil nil ((2098 . 2131) (#("<el" 0 3 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -2098) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -2) (undo-tree-id1557 . -2) (undo-tree-id1558 . -2) (undo-tree-id1559 . -2) (undo-tree-id1560 . -2) (undo-tree-id1561 . -2) (undo-tree-id1562 . -2) (undo-tree-id1563 . -2) (undo-tree-id1564 . -3) (undo-tree-id1565 . -3) (undo-tree-id1566 . -3) (undo-tree-id1567 . -3) (undo-tree-id1568 . -3) (undo-tree-id1569 . -3) (undo-tree-id1570 . -3) (undo-tree-id1571 . -3) (undo-tree-id1572 . -3) (undo-tree-id1573 . -3) 2101 (2098 . 2101) (2097 . 2098) (2095 . 2097) (2093 . 2095) (#("E" 0 1 (face org-level-2 wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -2093) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (#("v" 0 1 (face org-level-2 wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #("*" 0 1 (face org-indent)) fontified t)) . -2094) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) 2095 (2093 . 2095)) nil (25892 25942 936216 340000) 0 nil])
([nil nil ((#(" " 0 1 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t wrap-prefix #("      " 0 4 (face org-indent) 4 6 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . -2123) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) 2124 (2121 . 2124) 2121) nil (25892 25942 936197 184000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2123 . 2124) (#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . -2124) (2123 . 2125) 2122) nil (25892 25942 936191 774000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2124 . 2125) (#("
" 0 1 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified nil)) . -2125) (2124 . 2126)) nil (25892 25942 936191 443000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2262 . 2263) (nil fontified nil 2227 . 2263) (nil fontified nil 2191 . 2227) (nil fontified nil 2155 . 2191) (nil fontified nil 2125 . 2155) (2125 . 2263)) nil (25892 25942 936191 83000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 2121) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1)) nil (25892 25942 936190 341000) 0 nil])
([nil nil ((#(" 
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t) 1 2 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t rear-nonsticky t wrap-prefix #("     " 0 4 (face org-indent) 4 5 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 2121) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -2) (undo-tree-id1466 . -2) (undo-tree-id1467 . -2) (undo-tree-id1468 . -2) (undo-tree-id1469 . -2) (undo-tree-id1470 . -2) (undo-tree-id1471 . -2) (undo-tree-id1472 . -2) (undo-tree-id1473 . -2) (undo-tree-id1474 . -2) (undo-tree-id1475 . -2) (undo-tree-id1476 . -2) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -2) (undo-tree-id1481 . -2) (undo-tree-id1482 . -2) (undo-tree-id1483 . -2) (undo-tree-id1484 . -2) (undo-tree-id1485 . -2) (undo-tree-id1486 . -2) (undo-tree-id1487 . -2) (undo-tree-id1488 . -2) (undo-tree-id1489 . -2) (undo-tree-id1490 . -1) (undo-tree-id1491 . -2)) nil (25892 25942 936179 321000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t rear-nonsticky t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 2121) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1)) nil (25892 25942 936120 911000) 0 nil])
([nil current ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) fontified t)) . 2259) (undo-tree-id1309 . 1) (undo-tree-id1310 . -1)) nil (25892 25942 935984 285000) 0 nil])
nil
